---
- name: Create vnet
  when: create_test_network 
  block:
    - name: Render vnet config
      template:
        src: test_vnet.j2
        dest: /tmp/test_vnet

    - name: Create network
      ansible.builtin.shell: >
        onevnet create /tmp/test_vnet
      register: test_network
      failed_when: "test_network.rc != 0"

    - name: Delete vnet definition
      file:
        path: /etc/foo.conf
        state: absent

- name: Verify host offline and then set online
  set_fact:
    verification_result: "{{ (verification_result | default({})) | combine({'Test network creation' : 'ok'}) }}"
  when: create_test_network 

- name: Verify that VM image is in ready state
  ansible.builtin.shell: >
    oneimage list --f ID={{ test_vm_template_image_id }} -l STAT --no-header
  register: image_state
  until: image_state.stdout == "rdy" 
  retries: 10
  delay: 10

- name: Verify Marketplaces
  set_fact:
    verification_result: "{{ (verification_result | default({})) | combine({'Download a test VM template from the marketplace' : 'ok' }) }}"
   
# NOTE: test_vm_template_id variable is managed by a separate playbook
- name: Instantiate test VM
  ansible.builtin.shell: >
    onetemplate instantiate {{ test_vm_template_id }} --nic '{{ test_vnet_name }}'
  register: vm_id
  failed_when: "vm_id.rc != 0" 

- name: Wait for VM come up
  ansible.builtin.shell: >
    onevm list --f ID={{vm_id.stdout.split(':')[1] | trim}} -l STAT --no-header
  register: vm_state
  failed_when: "vm_state.rc != 0"
  until: vm_state.stdout == "runn"
  retries: 10
  delay: 10

- name: Verify test VM
  set_fact:
    verification_result: "{{ verification_result | combine({'Test VM instantiation' : 'ok' }) }}"

- name: Get VM IP
  ansible.builtin.shell: >
    onevm list --f ID={{vm_id.stdout.split(':')[1] | trim}} -l IP --no-header
  register: vm_ip
  failed_when: "vm_state.rc != 0"

- name: Verify connection to the test VM
  ansible.builtin.shell: >
    ping -c 2 {{ vm_ip.stdout }}
  register: vm_ping_result
  until: vm_ping_result.rc == 0
  retries: 10
  delay: 10
  when: test_vm_check_connection

- name: Record connection status to test VM
  set_fact:
    verification_result: "{{ verification_result | combine({'Connection to the test VM instance' : 'ok' }) }}"
  when: test_vm_check_connection
    
- name: Delete test VM
  ansible.builtin.shell: |
    onevm terminate --hard {{vm_id.stdout.split(':')[1]}}
  register: cleanup_result
  failed_when: "cleanup_result.rc != 0"

# Delete test network only when it was created by us
#
- name: Cleanup created test network
  ansible.builtin.shell: |
    onevnet delete "{{ test_vnet_name }}"
  register: cleanup_result
  failed_when: "cleanup_result.rc != 0"
  when: create_test_network
