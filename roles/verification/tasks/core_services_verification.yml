---
# tasks file for OpenNebula cloud post-deployment verification
#
#


# Gagther min subset of facts for datetime
- setup:
    gather_subset:
    - min

- name: Install ping dependencies
  ansible.builtin.package:
    name:
      - jc
      - jq
    state: present

# !!! Might be reasonable to discuss alternative approach for this check
- name: Validate xml-rpc API
  ansible.builtin.shell: >
    oneuser list
  register: oneuser_result
  failed_when: "oneuser_result.rc != 0"

- name: Save xml-rpc status
  set_fact:
    verification_result: "{{ (verification_result | default({})) | combine({'XML-RPC API status': 'ok'}) }}"
  
- name: Check oned service enabled
  ansible.builtin.shell: >
    systemctl status opennebula | grep enabled
  register: onestatus
  failed_when: "onestatus.rc != 0"

- name: Save oned service status
  set_fact:
    verification_result: "{{ verification_result | combine({'Oned is enabled': 'ok'}) }}"
      
- name: Restart oned
  ansible.builtin.shell: |
    systemctl stop opennebula && systemctl start opennebula
    sleep 3
    systemctl status opennebula | grep Active | grep -ow '(running)'
  register: oned_status
  failed_when: "'running' not in oned_status.stdout"

- name: Save oned service status
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula restart': 'ok'}) }}"

- name: Check oned version
  ansible.builtin.shell: >
    oned -v  
  register: oned_version

- name: Save oned version
  set_fact:
    verification_result: "{{ verification_result | combine({'Oned version': oned_version.stdout}) }}"


- name: Printout oned version
  debug:
    msg: "Installed oned version: {{ oned_version.stdout }}"

# Modify for Debian and RH-based distros        
- name: Verify OpenNebula private repos on the Debian-based OS
  ansible.builtin.shell: >
    cd /etc/apt/sources.list.d/ && grep -Rn opennebula . | awk '{print $2}'
  register: debian_repos_list
  failed_when: "debian_repos_list.rc != 0"
  when: ansible_os_family == "Debian"

- name: Verify OpenNebula private repos on the RH-based OS
  ansible.builtin.shell: >
    cd /etc/yum.repos.d/ && grep -Rn opennebula . | grep baseurl | awk -F '@' '/1/ {print $2}'
  register: rh_repos_list
  failed_when: "rh_repos_list.rc != 0"
  when: ansible_os_family == "RedHat"

- name: Save OpenNebula Debian repositories
  set_fact:
    verification_result: "{{ verification_result | combine({'Configured OpenNebula repository': debian_repos_list.stdout}) }}"
  when: debian_repos_list is defined and (debian_repos_list.skipped is not defined or not debian_repos_list.skipped)

- name: Save OpenNebula RedHat repositories
  set_fact:
    verification_result: "{{ verification_result | combine({'Configured OpenNebula repository': rh_repos_list.stdout}) }}"
  when: rh_repos_list is defined and (rh_repos_list.skipped is not defined or not rh_repos_list.skipped)

- block:
  - name: Verify OpenNebula scheduler can contact oned
    ansible.builtin.shell: |
      systemctl stop opennebula-scheduler && systemctl start opennebula-scheduler
      sleep 3
      grep 'oned successfully contacted' /var/log/one/sched.log
    register: one_scheduler
    failed_when: "one_scheduler.rc != 0"

  - name: Save OpenNebula scheduler can contact oned
    set_fact:
      verification_result: "{{ verification_result | combine({'OpenNebula scheduler can contact oned': 'ok'}) }}"
  when: one_version is version('6.99', '<')

- name: OpenNebula Gate service starts and shutdown
  ansible.builtin.shell: |
    systemctl stop opennebula-gate && systemctl start opennebula-gate
    sleep 3
    systemctl status opennebula-gate | grep Active  | grep -o '(running)'
  register: onegate_status
  failed_when: "'running' not in onegate_status.stdout"

- name: Save OpenNebula Gate can restart
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula Gate service restart' : 'ok'}) }}"

- name: Verify one-gate is configured to start at boot
  ansible.builtin.shell: >
   systemctl status opennebula-gate | grep enabled
  register: onegate_enabled
  failed_when: "'enabled' not in onegate_enabled.stdout"

- name: Save OpenNebula Gate configured to start at boot
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula Gate is configured to start at boot' : 'ok'}) }}"

- name: Verify one-gate listen & port on the server
  ansible.builtin.shell: >
    ss -tlpn | grep $(grep :port: /etc/one/onegate-server.conf | awk {'print $2'})
  register: onegate_service

- name: Save one-gate listen & port on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula one-gate service listens on the server' : 'ok'}) }}"


- name: Verify one-flow is configue to start at boot
  ansible.builtin.shell: >
   systemctl status opennebula-flow | grep enabled
  register: oneflow_enabled
  failed_when: "'enabled' not in oneflow_enabled.stdout"

- name: Save one-flow listen & port on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula one-flow service is enabled' : 'ok'}) }}"

- name: Verify one-flow stops and starts
  ansible.builtin.shell: |
    systemctl stop opennebula-flow && systemctl start opennebula-flow
    sleep 3
    systemctl status opennebula-flow | grep Active | grep -ow '(running)'
  register: oneflow_status
  failed_when: "'running' not in oneflow_status.stdout"

- name: Save one-flow listen & port on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify one-flow stops and starts' : 'ok'}) }}"


- name: Verify oneflow listen & port on the server
  ansible.builtin.shell: >
    ss -tlpn | grep -o $(grep :port: /etc/one/oneflow-server.conf | awk {'print $2'})
  register: oneflow_status
  failed_when: "oneflow_status.rc != 0"
    
- name: Save one-flow listen & port on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify one-flow service port is open on the server' : 'ok'}) }}"

- name: Verify fireedge GUI stops and starts
  ansible.builtin.shell: |
    systemctl stop opennebula-fireedge && systemctl start opennebula-fireedge
    sleep 3
    systemctl status opennebula-fireedge | grep Active | grep -o '(running)'
  register: fireedge_status
  failed_when: "'running' not in fireedge_status.stdout"

- name: Verify fireedge GUI stops & starts
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify fireedge GUI stops and starts' : 'ok'}) }}"

- name: Verify fireedge service is configured to start at boot time
  ansible.builtin.shell: >
    systemctl status opennebula-fireedge | grep enabled
  register: fireedge_enabled
  failed_when: "'enabled' not in fireedge_enabled.stdout"

- name: Verify fireedge GUI enabled
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify fireedge GUI is enabled to start automatically' : 'ok'}) }}"

- name: Fireedge service listens on the server
  ansible.builtin.shell: >
    ss -tlpn | grep $(grep -A1 'FireEdge server port' /etc/one/fireedge-server.conf | grep port: | awk '{print $2}')
  register: firedge_socket
  failed_when: "firedge_socket.rc != 0"

- name: Verify fireedge GUI listens on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify fireedge GUI listens port' : 'ok'}) }}"

- name: Connect to a fireedge server
  ansible.builtin.shell: >
    curl "{{ firedge_socket.stdout.split()[3] }}"
  register: connection_status
  failed_when: "connection_status.rc != 0"

- name: Verify connection to a fireedge server
  set_fact:
    verification_result: "{{ verification_result | combine({'Verify connection to a fireedge server' : 'ok'}) }}"

- name: Get registered hosts
  ansible.builtin.shell: >
    onehost list -j
  register: onehost_list
  failed_when: "onehost_list.rc != 0"

- name: Get hosts list
  set_fact:
    hosts_list: "{{ onehost_list.stdout | from_json | json_query('HOST_POOL.HOST[*].{id: ID, hostname: NAME, state: STATE}') }}"
  failed_when: "connection_status.rc != 0"

- name: Verify hosts list
  set_fact:
    verification_result: "{{ verification_result | combine({'Status of the registered HV hosts' : hosts_list }) }}"


- name: Set host offline and then set online
  ansible.builtin.shell: |
    onehost disable "{{ item.id }}"
    sleep 1
    onehost enable "{{ item.id }}"
    sleep 1
    onehost show "{{ item.id }}" -j
  register: host_monitoring
  loop: "{{ hosts_list }}" 

- name: Get host status
  debug:
    msg: "{{ host_monitoring }}"

# If we reached here all hosts monitoring is ok. Individual hosts status is in hosts_list variable    
- name: Verify host offline and then set online
  set_fact:
    verification_result: "{{ verification_result | combine({'Put hosts offline and then set online. Hosts status' : 'ok' }) }}"

- name: Get datastores list
  ansible.builtin.shell: >
    onedatastore list -j
  register: datastore_list
  failed_when: "datastore_list.rc != 0"

- name: Verify datastores list
  set_fact:
    verification_result: "{{ verification_result | combine({'Datastores list' : datastore_list.stdout | from_json | json_query('DATASTORE_POOL.DATASTORE[*].NAME')}) }}"

- name: Get DS capacity
  assert:
    that:
      - item['FREE_MB'] | int  >= 0
    quiet: true
    fail_msg: "{{item['NAME'] }} datastore  has no free space ({{ item['FREE_MB'] }}MB is available)"   
  when: "item['NAME'] != 'system'"  
  loop: "{{ datastore_list.stdout | from_json | json_query('DATASTORE_POOL.DATASTORE') }}"

- name: Verify DS capacity
  set_fact:
    verification_result: "{{ verification_result | combine({'Datastore capacity more than 0' : 'ok'}) }}"

  
  # We just checking how many marketplaces are registered, if no marketplaces -> fail
- name: Check marketplace
  ansible.builtin.shell: >
    onemarket list -j
  register: marketplace_list
  failed_when: marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE') | length == 0

- name: Verify Marketplaces
  set_fact:
    verification_result: "{{ verification_result | combine({'Registered marketplaces' : marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE[*].NAME')}) }}"


- name: Get marketplace status
  debug:
    msg: "{{ marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE') | length }}"

# Prepare report 
- name: Render report
  delegate_to: localhost
  become: false
  vars:
    date: "{{ '%Y-%m-%d %H:%M:%S' | strftime(ansible_date_time.epoch) }}"  
  template:
    src: appendix-cloud-report.j2 
    dest: /tmp/cloud_verification_report.html
  ignore_errors: True

- name: Print report location
  ansible.builtin.debug: 
    msg: |
      ******************************************************
      Verification report rendered to /tmp/cloud_verification_report.html
      ******************************************************
