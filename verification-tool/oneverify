#!/usr/bin/ruby

############################################################################
# Set up Frontend libraries location
############################################################################

ONE_LOCATION = ENV['ONE_LOCATION']

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby'
    GEMS_LOCATION     = '/usr/share/one/gems'
    VMDIR             = '/var/lib/one'
    CONFIG_FILE       = '/var/lib/one/config'
    LOG_FILE          = '/var/log/one/host_error.log'
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby'
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems'
    VMDIR             = ONE_LOCATION + '/var'
    CONFIG_FILE       = ONE_LOCATION + '/var/config'
    LOG_FILE          = ONE_LOCATION + '/var/host_error.log'
end

# %%RUBYGEMS_SETUP_BEGIN%%
if File.directory?(GEMS_LOCATION)
    real_gems_path = File.realpath(GEMS_LOCATION)
    if !defined?(Gem) || Gem.path != [real_gems_path]
        $LOAD_PATH.reject! {|l| l =~ /vendor_ruby/ }

        # Suppress warnings from Rubygems
        # https://github.com/OpenNebula/one/issues/5379
        begin
            verb = $VERBOSE
            $VERBOSE = nil
            require 'rubygems'
            Gem.use_paths(real_gems_path)
        ensure
            $VERBOSE = verb
        end
    end
end
# %%RUBYGEMS_SETUP_END%%

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << RUBY_LIB_LOCATION + '/oneverify'

############################################################################
# Required libraries
############################################################################

require 'opennebula'
require 'optparse'
require 'yaml'

require_relative 'verifiers/oned'
require_relative 'verifiers/sunstone'
require_relative 'verifiers/host'
require_relative 'verifiers/img_datastore'
require_relative 'verifiers/sys_datastore'
require_relative 'verifiers/vnet'

############################################################################
# Parameters/Config initalization
############################################################################

options = {
    :endpoint  => 'http://localhost:2633/RPC2',
    :debug     => false,
    :dump      => false,
    :checklist => YAML.load_file('config/checklist.yaml')
}

OptionParser.new do |opts|
    opts.banner = 'Usage: ./oneverify [options]'

    opts.on('-D', '--debug', 'Run in debug mode') do |v|
        options[:debug] = v
    end

    desc = 'Dump verification info into STDOUT (not interactive mode).' \
           'Checklist/tips wont be printed'
    opts.on('--dump', desc) do |v|
        options[:dump] = v
    end
end.parse!

config = YAML.load_file('config/config.yaml')
options.merge!(config)

############################################################################
# List of VERIFIERS
############################################################################

VERIFIERS = [
    OnedVerifier,
    SunstoneVerifier,
    VnetVerifier,
    ImageDatastoreVerifier,
    SystemDatastoreVerifier,
    HostVerifier
]

############################################################################
# Main Program
############################################################################

def run_verifiers(verifiers, options)
    # Get default client (tool must be executed as oneadmin at the frontend node)
    client = OpenNebula::Client.new(nil, options[:endpoint])

    verifiers.each do |verifier|
        loop do
            begin
                system('clear') unless options[:dump]
                puts "Running #{verifier}"
                puts '='*80

                verifier.verify(client, options)

                # Checklist is not printed in dump mode
                if !options[:dump]
                    puts 'Checklist'
                    puts '-'*80

                    # Print auto checks (in green)
                    if options[:checklist][verifier.to_s][:auto]
                        puts 'Automatically checked:'
                        options[:checklist][verifier.to_s][:auto].each do |check|
                            puts "\t- #{set_green(check)}"
                        end
                    end

                    # Print manual checks (in yellow)
                    # TODO: support categories to print only for specific cases (e.g LVM tips)
                    if options[:checklist][verifier.to_s][:manual]
                        puts 'Manual check list:'
                        options[:checklist][verifier.to_s][:manual].each do |check|
                            puts "\t- #{set_yellow(check)}"
                        end
                    end
                end
                puts
            rescue StandardError => e
                STDERR.puts "Error running #{verifier}: #{e.message}"
                STDERR.puts e.backtrace if options[:debug]
            end

            break if options[:dump]

            # Print options
            print 'Retry (R), Break (B), Continue (press any key): '
            action = STDIN.gets.strip.upcase

            case action
            when 'R'
                next
            when 'B'
                exit(0)
            else
                break
            end
        end
    end
end

begin
    if Process.uid.zero? || Process.gid.zero?
        raise 'Cannot run oneverify as root'
    end

    run_verifiers(VERIFIERS, options)
rescue StandardError => e
    STDERR.puts e.message
    STDERR.puts e.backtrace if options[:debug]
    exit(-1)
end

exit(0)
